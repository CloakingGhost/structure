"이진트리"

각 노드가 최대 2개(0~2)의 자식 노드를 가지는 트리
왼쪽 자식노드 / 오른쪽 자식노드

정 이진 트리(full binary tree), 엄격한 이진 트리(strict binary tree)
- 자신 노드가 없거나 2개로 채워진 경우

포화 이진 트리(perfect binary tree)
- 모든 노드가 2개의 자식을 가지고 leaf 노드가 같은 레벨일 때
- 높이가 h 인 포화 이진 트리에서 노드 개수는 2^(h+1) - 1
- leaf 노드의 개수 2^h

완전 이진 트리(complete binary tree)
- 마지막 레벨을 제외하고 모든 노드가 채워져야 함
- 노드는 왼쪽에서 오른쪽으로 채워짐

포화 이진 트리는 완전 이진 트리의 조건을 충족
포화 이진 트리  [ 완전 이진 트리
완전 이진 트리 ![ 포화 이진 트리


완전 이진 트리는 일차원 배열로 표현 가능
다른 트리도 배열도 표현 가능하지만 중간중간 null이 포함됨
0번째 인덱스는 비우고 1번째 인덱스부터 루트 값을 넣으면
인덱스 위치로 찾을 수 있는 몇가지 연산이 있다
루트 노드: 1(인덱스)
노드 i 의 부모: i / 2
노드 i 의 왼쪽 자식: i * 2
노드 i 의 오른쪽 자식: i * 2 + 1


"응용"
힙
이진 트리 탐색(Binary Search Tree)
B-tree: 데이터베이스에서 사용됨
ABL트리

=================================
"트리 탐색"

재귀호출이 특징

preorder: 루트노드 왼쪽서브트리 오른쪽서브트리
inorder: 왼쪽서브트리 루트노드 오른쪽서브트리
postorder: 왼쪽서브트리 오른쪽서브트리 루트노드

=================================
"Binary Search Tree"

트리 구조 자체로는 데이터의 특성에 아무런 제약이 없음

이진트리의 특성을 사용
노드의 왼쪽 서브 트리에는 루트 노드보다 작은값
노드의 오른쪽 서브 트리에는 루트 노드보다 큰 값
서브트리는 다시 이진 탐색 트리
중복된 값은 없음

가장 왼쪽 값은 최소값
가장 오른쪽 값은 최대값

중위 탐색 시 정렬된 배열을 얻을 수 있음

"삽입"

중복된 데이터는 삽입하지 않음
추가된 노드는 트리의 leaf 노드


"삭제"
삭제 데이터의 위치를 찾음
- 삭제할 데이터가 leaf 인 경우
=> 부모 노드에게 null 을 리턴하여 자식 포인터를 null 로 만듬
- 한 개의 자식 노드를 가질 경우
=> 자신의 위치의 자식 노드로 옮김
- 두 개의 자식 노드를 가질 경우
=> 왼쪽 서브 트리의 최대값과 교체 || 오른쪽 서브 트리의 최소값과 교체
=> 부모 노드는 왼쪽보다는 크고 오른쪽 보다는 작아야하기 때문